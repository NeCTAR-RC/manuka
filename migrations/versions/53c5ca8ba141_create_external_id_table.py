"""Create external id table

Revision ID: 53c5ca8ba141
Revises: 52e8555a0886
Create Date: 2020-04-27 15:35:02.438353

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base


# revision identifiers, used by Alembic.
revision = '53c5ca8ba141'
down_revision = '52e8555a0886'
branch_labels = None
depends_on = None

Base = declarative_base()


class User(Base):
    __tablename__ = 'user'
    id = sa.Column(sa.Integer, primary_key=True)
    persistent_id = sa.Column(sa.String(250), unique=True)
    user_id = sa.Column(sa.String(64))
    shibboleth_attributes = sa.Column(sa.PickleType(protocol=2))
    external_ids = relationship("ExternalId", back_populates="user")
    last_login = sa.Column(sa.DateTime())


class ExternalId(Base):
    __tablename__ = 'external_id'
    id = sa.Column(sa.Integer, primary_key=True)
    user_id = sa.Column(sa.Integer, sa.ForeignKey(User.id))
    user = relationship("User", back_populates="external_ids")
    persistent_id = sa.Column(sa.String(250), unique=True)
    attributes = sa.Column(sa.JSON)
    idp = sa.Column(sa.String(250))
    last_login = sa.Column(sa.DateTime())


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('external_id',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('persistent_id', sa.String(length=250), nullable=True),
    sa.Column('attributes', sa.JSON(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('idp', sa.String(length=250), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('persistent_id')
    )
    # ### end Alembic commands ###

    session = sa.orm.Session(bind=op.get_bind())
    for user in session.query(User):
        eid = ExternalId(user_id=user.id,
                         attributes=user.shibboleth_attributes,
                         persistent_id=user.persistent_id)
        eid.last_login = user.last_login
        try:
            eid.idp = eid.attributes['idp']
        except TypeError:
            pass
        session.add(eid)
    session.commit()

    op.drop_column('user', 'persistent_id')
    op.drop_column('user', 'shibboleth_attributes')


def downgrade():
    op.add_column('user', sa.Column('persistent_id', sa.String(250),
                                    unique=True))
    op.add_column('user', sa.Column('shibboleth_attributes',
                                    sa.PickleType(protocol=2)))

    session = sa.orm.Session(bind=op.get_bind())
    #    with session.begin(subtransactions=True):
    for external_id in session.query(ExternalId):
        user = external_id.user
        user.persistent_id = external_id.persistent_id
        user.shibboleth_attributes = external_id.attributes
        session.add(user)
    session.commit()

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('external_id')
    # ### end Alembic commands ###
